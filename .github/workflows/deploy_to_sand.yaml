name: Azure Bicep Check and Deployment
on: 
  pull_request:
    types:
      - closed
    branches:
    - main 

# Top-level permissions
permissions:
  id-token: write
  actions: read
  contents: read
      
jobs:
  code-testing:
    if: github.event.pull_request.merged == true
    permissions:
      id-token: write
      contents: read
    runs-on: cps-ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Binary-from-path-workaround
      run:  |
            az config set bicep.use_binary_from_path=false
            az bicep install
    - name: whatif
      uses: azure/arm-deploy@v2
      with:
        scope: subscription
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        region: uksouth
        template: ./main.bicep
        parameters: ./main.bicepparam
        additionalArguments: "--what-if"

  defender-for-devops:
    needs: code-testing
    runs-on: cps-ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      # Checkout your code repository to scan
    - uses: actions/checkout@v4
      # Run analyzers
    - name: Run Microsoft Security DevOps Analysis
      uses: microsoft/security-devops-action@v1
      id: msdo      
      with: 
        tools: checkov, terrascan, trivy
      # Upload alerts to the Security tab
    - name: Upload alerts to Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
       sarif_file: ${{ steps.msdo.outputs.sarifFile }}
      # Upload alerts file as a workflow artifact
    - name: Upload alerts file as a workflow artifact
      uses: actions/upload-artifact@v4
      with:  
       name: alerts
       path: ${{ steps.msdo.outputs.sarifFile }}

  code-deployment:
    needs: defender-for-devops
    permissions:
      id-token: write
      contents: read
    runs-on: cps-ubuntu-latest
    steps:
    - uses: actions/checkout@main
    - uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Binary-from-path-workaround
      run:  |
            az config set bicep.use_binary_from_path=false
            az bicep install    
    - name: deploy
      uses: azure/arm-deploy@v2
      with:
        scope: subscription
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        region: uksouth
        template: ./main.bicep
        parameters: ./main.bicepparam